% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wrap_sha_condition.R
\name{wrap_sha_condition}
\alias{wrap_sha_condition}
\title{Build a Function with an package SHA condition}
\usage{
wrap_sha_condition(package, expect_sha)
}
\arguments{
\item{package}{the name of a package, given as a name or character string.}

\item{expect_sha}{a character vector defining the SHA values that allow `code` to execute.}
}
\value{
a function that runs `code` to execute. Use braces ({}) for multi-line executions.
}
\description{
`wrap_sha_condition` returns a function that checks a package's SHA is valid before execution.
}
\details{
It is a wrapper that essentially returns `function(code) run_on_sha_match(package, expect_sha, code)`.

It can be used to save repeated calls to `package` and `expect_sha`.
}
\examples{
remotes::install_git("https://github.com/tidyverse/ggplot2.git", ref = "4fbc8575d80e54e1973ac58e979c2300aec21394")
safely_run_ggplot2 <- wrap_sha_condition(ggplot2, "4fbc8575d80e54e1973ac58e979c2300aec21394")
safely_run_ggplot2(({print("Exectuted"); 2 * 8}))

}
