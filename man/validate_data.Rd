% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/member_data.R
\name{validate_data}
\alias{validate_data}
\title{Validate data}
\usage{
validate_data(.data, validators = list(), transformers = list())
}
\arguments{
\item{.data}{A tibble contains at least fields from `names(data_spec$validators)` and `names(data_spec$transformers)`.}

\item{validators}{A named list of `validators` that will operate on fields in `.data` using `dplyr::summarise()`.}

\item{transformers}{A named list of `transformers` that will operate on fields in `.data` using `dplyr::mutate()`.

`validators` and `transformers` will be a named list of functions, where the names correspond to fields within `.data`.
E.g., `validators <- list(gender = \(x) all(x %in% c("M", "F")))`; `transformers <- list(gender = as.character)`}
}
\value{
A tibble, possibly modified using `transformers`.
}
\description{
`validate_data()` accepts a data frame and performs two operations:
}
\details{
1. Check fields satisfy data requirements specified in `data_spec$validators`.
2. Possibly modify fields using `data_spec$transformers`.

`data_spec$validators` and `data_spec$transformers` will be named lists of functions, where the names correspond to fields in `.data`.

`dplyr::summarise()` is called on each field in `data_spec$validators`. `validate_data()` will fail if any field returned `FALSE`.

`dplyr::mutate()` is called on each field in `data_spec$transformers`.
}
\examples{
.data <- tibble::tibble(identifier = c(1, 2), gender = "m")
check_unique <- \(x) !any(duplicated(x))
check_gender <- \(x) all(x \%in\% c("M", "F"))
check_dob <- \(x) all(lubridate::is.Date(x))

# Pass
validate_data(.data, validators = list(identifier = check_unique))

# Missing dob field
validate_data(.data, validators = list(identifier = check_unique, gender = check_gender, dob = check_dob))

# Fail gender value test
validate_data(.data, validators = list(identifier = check_unique, gender = check_gender))

# Convert identifier to character
validate_data(.data, validators = list(identifier = check_unique), transformers = list(identifier = as.character))
}
