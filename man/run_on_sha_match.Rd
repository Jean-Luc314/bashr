% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_on_sha_match.R
\name{run_on_sha_match}
\alias{run_on_sha_match}
\title{Run code conditional on package SHA}
\usage{
run_on_sha_match(package, expect_sha, code)
}
\arguments{
\item{package}{the name of a package, given as a name or character string.}

\item{expect_sha}{a character vector defining the SHA values that allow `code` to execute.}

\item{code}{Code to execute. Use braces ({}) for multi-line executions.}
}
\value{
The result of `code`.
}
\description{
`run_on_sha_match()` lets you safely execute `code` when only valid `package` versions are installed.
It can be useful as a risk control to prevent unintended side-effects.
E.g., when `code` should only save files when specific package versions are installed.
}
\details{
It checks `utils::packageDescription(package)$RemoteSha %in% expect_sha`.
When `TRUE`, `code` is executed. I.e., `eval(code, envir = parent.frame())`.
When `FALSE` an error is thrown.
}
\examples{
# Execute
remotes::install_git("https://github.com/tidyverse/ggplot2.git", ref = "4fbc8575d80e54e1973ac58e979c2300aec21394")
run_on_sha_match(ggplot2, "4fbc8575d80e54e1973ac58e979c2300aec21394", {
  print("Executed")
  2 * 2 == 4
})

# Don't Execute
run_on_sha_match(ggplot2, "dummy", {
  print("Not Executed")
  2 * 2 == 4
})
}
